{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlugin, Capacitor, PluginListenerHandle } from '@capacitor/core';\r\n\r\nimport type { ElkeBatteryPlugin, BatteryInfo } from './definitions';\r\n\r\nconst ElkeBatteryNative = registerPlugin<ElkeBatteryPlugin>('ElkeBattery', {\r\n  web: () => import('./web').then((m) => new m.ElkeBatteryWeb()),\r\n});\r\n\r\n// Simplified wrapper to handle native events properly\r\nexport class ElkeBatteryWrapper {\r\n  private listeners: Map<string, (info: BatteryInfo) => void> = new Map();\r\n  private nativeListenerHandle: PluginListenerHandle | null = null;\r\n\r\n  async getBatteryInfo(): Promise<BatteryInfo> {\r\n    return ElkeBatteryNative.getBatteryInfo();\r\n  }\r\n\r\n  async addBatteryListener(callback: (info: BatteryInfo) => void): Promise<string> {\r\n    const callbackId = this.generateCallbackId();\r\n    this.listeners.set(callbackId, callback);\r\n\r\n    // For native platforms, use Capacitor's event system\r\n    if (Capacitor.isNativePlatform()) {\r\n      if (!this.nativeListenerHandle) {\r\n        // Listen for native events using Capacitor's event system\r\n        this.nativeListenerHandle = await ElkeBatteryNative.addListener('batteryChanged', (data: BatteryInfo) => {\r\n          console.log('Native battery event received:', data);\r\n          // Notify all registered listeners\r\n          this.listeners.forEach(cb => cb(data));\r\n        });\r\n        console.log('Capacitor event listener setup complete');\r\n      }\r\n      \r\n      // Call the native method to start the battery receiver\r\n      try {\r\n        await ElkeBatteryNative.addBatteryListener(() => {});\r\n        console.log('Native battery receiver started');\r\n      } catch (error) {\r\n        console.error('Native battery listener setup error:', error);\r\n      }\r\n    } else {\r\n      // For web, use the original implementation\r\n      const result = await ElkeBatteryNative.addBatteryListener(callback);\r\n      return result.value;\r\n    }\r\n\r\n    return callbackId;\r\n  }\r\n\r\n  async removeBatteryListener(callbackId: string): Promise<void> {\r\n    this.listeners.delete(callbackId);\r\n\r\n    if (!Capacitor.isNativePlatform()) {\r\n      return ElkeBatteryNative.removeBatteryListener(callbackId);\r\n    }\r\n\r\n    // For native, if no more listeners, clean up the native listener\r\n    if (this.listeners.size === 0) {\r\n      try {\r\n        await ElkeBatteryNative.removeBatteryListener(callbackId);\r\n        if (this.nativeListenerHandle) {\r\n          await this.nativeListenerHandle.remove();\r\n          this.nativeListenerHandle = null;\r\n        }\r\n        console.log('Native listener cleaned up');\r\n      } catch (error) {\r\n        console.error('Error cleaning up native listener:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateCallbackId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n}\r\n"]}