{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type { ElkeBatteryPlugin, BatteryInfo } from './definitions';\r\n\r\nexport class ElkeBatteryWeb extends WebPlugin implements ElkeBatteryPlugin {\r\n  private batteryAPI: any;\r\n  private batteryListeners: Map<string, (info: BatteryInfo) => void> = new Map();\r\n  private eventListeners: Map<string, () => void> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  async getBatteryInfo(): Promise<BatteryInfo> {\r\n    if (!this.batteryAPI) {\r\n      // @ts-ignore\r\n      this.batteryAPI = await (navigator as any).getBattery?.();\r\n    }\r\n\r\n    if (this.batteryAPI) {\r\n      const level = Math.round(this.batteryAPI.level * 100);\r\n      const isCharging = this.batteryAPI.charging;\r\n      const isLowBattery = level < 20;\r\n      \r\n      let status: 'charging' | 'discharging' | 'full' | 'not_charging' | 'unknown' = 'unknown';\r\n      if (isCharging) {\r\n        status = level === 100 ? 'full' : 'charging';\r\n      } else {\r\n        status = 'discharging';\r\n      }\r\n\r\n      return {\r\n        level,\r\n        isCharging,\r\n        isLowBattery,\r\n        status\r\n      };\r\n    }\r\n\r\n    // Fallback for browsers that don't support Battery API\r\n    return {\r\n      level: 100,\r\n      isCharging: false,\r\n      isLowBattery: false,\r\n      status: 'unknown'\r\n    };\r\n  }\r\n\r\n  async addBatteryListener(callback: (info: BatteryInfo) => void): Promise<{value: string}> {\r\n    const callbackId = this.generateCallbackId();\r\n    this.batteryListeners.set(callbackId, callback);\r\n\r\n    if (!this.batteryAPI) {\r\n      // @ts-ignore\r\n      this.batteryAPI = await (navigator as any).getBattery?.();\r\n    }\r\n\r\n    if (this.batteryAPI) {\r\n      const updateCallback = () => {\r\n        this.getBatteryInfo().then(info => callback(info));\r\n      };\r\n\r\n      // Store the actual event listener functions for proper cleanup\r\n      this.eventListeners.set(callbackId + '_charging', updateCallback);\r\n      this.eventListeners.set(callbackId + '_level', updateCallback);\r\n\r\n      this.batteryAPI.addEventListener('chargingchange', updateCallback);\r\n      this.batteryAPI.addEventListener('levelchange', updateCallback);\r\n    }\r\n\r\n    return { value: callbackId };\r\n  }\r\n\r\n  async removeBatteryListener(callbackId: string): Promise<void> {\r\n    this.batteryListeners.delete(callbackId);\r\n\r\n    // Remove the actual event listeners from the battery API\r\n    if (this.batteryAPI) {\r\n      const chargingListener = this.eventListeners.get(callbackId + '_charging');\r\n      const levelListener = this.eventListeners.get(callbackId + '_level');\r\n\r\n      if (chargingListener) {\r\n        this.batteryAPI.removeEventListener('chargingchange', chargingListener);\r\n        this.eventListeners.delete(callbackId + '_charging');\r\n      }\r\n\r\n      if (levelListener) {\r\n        this.batteryAPI.removeEventListener('levelchange', levelListener);\r\n        this.eventListeners.delete(callbackId + '_level');\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateCallbackId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n}\r\n"]}